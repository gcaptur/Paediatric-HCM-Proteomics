# Paediatric-HCM-Proteomics
#################################################################

# This code was used to analyse the plasma proteomics data reported in the paper: "A new multiplexed plasma biomarker panel developed using targeted proteomics and machine learning has diagnostic and prognostic potential in children with hypertrophic cardiomyopathy" by Captur G, Kaski J et al.

#################################################################

# Normality tests (exemplar analyte code)

a5<- read.csv("~/Directory/a5.csv")				

plot(density(a5$ALDOA));
shapiro.test(a5$ALDOA);
qqnorm(a5$ALDOA);
qqline(a5$ALDOA, col = 2);

# Parametric and non-parametric difference  (exemplar analyte code)

a1<- read.csv("~/Directory/a1.csv")
a1$GROUP <- as.factor(a1$status)
GROUP <-a1$GROUP 
table(GROUP)

t.test(a1$ALDOA~a1$GROUP, data=a1, p.adjust.method = "holm")
wilcox.test(a1$ALDOA~a1$GROUP, data=a1, p.adjust.method = "holm")
describeBy(a1$A2AP, a1$GROUP)

res.aovIGHG1 <- aov(a1$IGHG1 ~a1$GROUP, data = a1)
summary(res.aovIGHG1)
TukeyHSD(res.aovIGHG1)

# Diagnostic panel by SVM

# Training set 
data <- read.csv("~/Directory/data.csv")
head(data,5)
data$status <- as.factor(data$status)
status <- data$status
table(data$status)
prop.table(table(data$status))
rose <- ROSE(status~., data = data, seed = 1)$data
table(rose$status)
prop.table(table(rose$status))

# Oversample 
rose <- ovun.sample(status~., data = data, method = "over",N = 300)$data
table(rose$status)
prop.table(table(rose$status))

# Over-undersample
rose <- ovun.sample(status~., data = data, method = "both", p=0.5, N=1000, seed = 1)$data
table(rose$status)
prop.table(table(rose$status))

index <- c(1:nrow(rose))
test.index <- sample(index, size = (length(index)/3))
training <- rose[-test.index ,]
test <- rose[test.index ,]
prop.table(table(training$status))
prop.table(table(test$status))

x <- subset(training, select=-status)
y <- training$status
xx <- subset(test, select=-status)
yy <- test$status
table(training$status)
prop.table(table(training$status))

svm_model1 <- svm(x,y)

summary(svm_model1)
pred <- predict(svm_model1,x, decision.values = TRUE)
table(pred,y)
svm_tune <- tune(svm, train.x=x, train.y=y, 
              kernel="radial", ranges=list(cost=10^(-1:2), gamma=c(.5,1,2)))
print(svm_tune)

svm_model_after_tune <- svm(x,y, kernel="radial", cost=10, gamma=2, decision.values = TRUE)
summary(svm_model_after_tune)

pred <- predict(svm_model_after_tune,x, decision.values = TRUE) 
table(pred,y)
sum(training$status == pred)/200
summary(pred)
pred
y 

pred2<-prediction(as.numeric(pred), as.numeric(training$status))
curve<-performance(pred2,"auc")
rates <- performance(pred2, "tpr", "fpr") 
summary(pred2)
summary(rates)
pred2
plot(rates)
print(str(curve))
print(svm_model_after_tune)

rates2 <- performance(pred2, measure = "tpr", x.measure = "fpr")
plot(rates2)
abline(a=0, b= 1) 

perf1 <- performance(pred2, "prec", "rec")
plot(perf1)

perf2 <- performance(pred2, "sens", "spec")
plot(perf2)

# Validation set 

best.svm.pred <- predict(svm_model_after_tune,xx, decision.values = TRUE)
table(best.svm.pred,yy)
table(Prediction = best.svm.pred, Truth = test$status)
sum(test$status == best.svm.pred)/100

pred3<-prediction(as.numeric(best.svm.pred), as.numeric(test$status))
curve<-performance(pred3,"auc")
rates3 <- performance(pred3, "tpr", "fpr") 
summary(pred3)
best.svm.pred
yy 
plot(rates3)
print(str(curve))
print(svm_model_after_tune)

rates3 <- performance(pred3, measure = "tpr", x.measure = "fpr")
plot(rates3)
abline(a=0, b= 1) 

perf3 <- performance(pred3, "prec", "rec")
plot(perf3)
print(perf3)
summary(perf3)

# Boxplot of prediction biomarker scores for AUC

a6 <- read.csv("~/Directory/training.csv")

par(mar=c(8,8,4,2)) 
boxplot(a6$value ~ a6$group, data = a6, names = c("Control","HCM"), col = c("#0000ff22","royalblue2"),
ylab = "Biomarker Score", cex.axis=1.5, cex.lab=1.5, outline = FALSE)

a6 <- read.csv("~/Directory/validation.csv")

par(mar=c(8,8,4,2)) 
boxplot(a6$value ~ a6$group, data = a6, names = c("Control","HCM"), col = c("#0000ff22","royalblue2"),
ylab = "Biomarker Score", cex.axis=1.5, cex.lab=1.5, outline = FALSE)

# Boxplot of analyte differences HCM vs control (exemplar analyte code)

a6 <- read.csv("~/Directory/a6.csv")

par(mar=c(8,8,4,2)) 
boxplot(a6$TLN1 ~ a6$status, data = a6, names = c("Control","HCM"), col = c("#0000ff22","royalblue2"),
ylab = "GST01 (ppm)", cex.axis=1.5, cex.lab=1.5, outline = FALSE)

# PCA 4 biomakers distinguishing high from low risk HCM 

iris<- read.csv("~/Directory/risk.csv",  sep=",", header = TRUE)
iris=read.table("~/Directory/risk.csv",  sep=",", header = TRUE)
fix(iris)

RISKGROUP1 <- as.factor(iris$RISKGROUP1)

iris <- data.frame(iris[,-1], row.names=iris[,1])

irispca <- prcomp(na.omit(iris[,c(1:5)]), center = TRUE,scale. = TRUE)

par(mar = c(2, 2, 2, 2))
fviz_pca_ind(irispca,
             col.ind = "black", 
             legend.title = "Risk Group",
             palette = c("#C5CDD8", "#8F282B"),
             geom.ind = "point",
             fill.ind = RISKGROUP1, 
             pointshape = 21, 
             pointsize = 3, alpha = 0.5,
             addEllipses = TRUE, 
             ellipse.alpha = 0.05, mean.point = FALSE)

res.var <- get_pca_var(irispca)
res.var$contrib 

# ROC to estimate optimal cutpoints for exemplar prognostic biomarker 

iris<- read.csv("~/Directory/roc.csv",  sep=",", header = TRUE)
iris=read.table("~/Directory/roc.csv",  sep=",", header = TRUE)
fix(iris)
cp <- cutpointr(iris, APOL1, status, method = maximize_metric, metric = sum_sens_spec)
summary(cp)

# Kaplan-Meier curve exemplar 

iris<- read.csv("~/Directory/km.csv",  sep=",", header = TRUE)
iris=read.table("~/Directory/km.csv",  sep=",", header = TRUE)
fix(iris)
str(iris)

status <- as.factor(iris$status)
APOL1x <- as.factor(iris$APOL1x)
C5bx <- as.factor(iris$C5bx)
IGHEx <- as.factor(iris$IGHEx)
SAA4x <- as.factor(iris$SAA4x)
SUMx <- as.factor(iris$SUMx)

mycol <- rgb(131, 139, 139, max = 255, alpha = 80, names = "lightgray")
objNpsurv <- npsurv(formula = Surv(iris$days, status) ~ APOL1x, data = iris)
class(objNpsurv)
dev.new(bg = "white")
survplot(objNpsurv, col = c("blue4", "darkred"), lty = "solid", lwd=1.4, conf = "none", time.inc = 50, dots = FALSE, xlab = "Days of Follow-Up", ylab = "Cumulative Survival Probability", col.lab="black",  levels.only  = TRUE, abbrev.label = FALSE, mark.time=TRUE, cex.markTime = 2, pch.markTime = 1, cex.lab=0.1)
lines(objNpsurv, col = mycol)
title(main="Kaplan-Meier Curve for APOL1 in LVH+ HCM children", col.main="black", cex.main=1, font.lab=1)

require(survival)
APOL1x <- factor(APOL1x , levels = c(0,1))
fit1 = coxph(Surv(iris$days, status) ~ APOL1x, data = iris)
fit1
exp(confint(fit1))

# HCA

iris<-read.table("~/Directory/hca.csv", sep=",", header = TRUE)
iris=read.table("~/Directory/hca.csv", sep=",", header = TRUE)

iris <- data.frame(iris[,-1], row.names=iris[,1])

iris1 <- as.matrix(iris[, grep("_", colnames(iris))])

col = list(Status = c("0" = "#C5CDD8", "1" = "#8F282B"))

row_ha = rowAnnotation(Status = iris$Status, col = col, annotation_height = unit(2, "mm"))

row_dend = hclust(dist(iris1)) 
col_dend = hclust(dist(t(iris1)))

par(mar=c(8,8,4,2)) 
Heatmap(iris1, name = "Analytes", col = viridis::viridis_pal(direction = -1)(4), border_gp = gpar(col = "#e0e0e0", lty = 0.1), rect_gp = gpar(col = "#e0e0e0", lwd = 0.1), right_annotation = row_ha, show_row_names = FALSE, show_column_names = TRUE, column_names_gp = gpar(fontsize = 8), cluster_columns = color_branches(col_dend, k = 4), split = data.frame(Status = iris$Status))

# Correlogram

iris<-read.table("~/Directory/corr.csv", header=TRUE, sep=",") 
iris=read.table("~/Directory/corr.csv", header=TRUE, sep=",")

M<-cor(iris, use="complete.obs", method = "spearman")
head(round(M,2))

cor.mtest <- function(mat, ...) {
    mat <- as.matrix(mat)
    n <- ncol(mat)
    p.mat<- matrix(NA, n, n)
    diag(p.mat) <- 0
    for (i in 1:(n - 1)) {
        for (j in (i + 1):n) {
            tmp <- cor.test(mat[, i], mat[, j], ...)
            p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
        }
    }
  colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
  p.mat
 }

p.mat <- cor.mtest(iris)
head(p.mat[, 1:5])

corrplot(M, method="circle", type="upper", order="hclust", col=brewer.pal(n=8, name="PuOr"), tl.col="black", tl.srt=70, p.mat = p.mat, sig.level = 0.05, insig = "blank", tl.cex = 0.5)

# Required packages 

require(HH)
require(stats)
require(psych)
require(Hmisc)
require(pastecs)
require(graphics)
require(ggplot2)
require(scales)
require(reshape2)
require(plyr)
require(zoo)
require(reshape)
require(dplyr)
require(gapminder)
require(e1071)
require(simecol)
require(QuantPsyc)
require(data.table)
require(car)
require (lattice)
require(beeswarm)
require(ROCR) 
require(caret)
require(tidyverse)
require(ROSE)
require(rpart)
require(pROC)
require(gplots)
require(colorspace)
require(dendextend)
require(pvclust)
require(circlize)
require(ape)
require(ggdendro)
require(magrittr)
require(pheatmap)
require(grid)
require(vegan)
require(heatmap3)
require(ComplexHeatmap)
require(RColorBrewer)
require(ggbiplot)
require(factoextra)
require(cutpointr)
require(xtable)
require(xlsx)
require(survival)
require(msm)
require(ISwR)
require(lubridate)
require(dplR)
require(BurStMisc)
require(lsr)
require(packHV)
require(gridExtra)
require(rms)
install.packages("rms")
install.packages("packHV")
install.packages("ISwR")
install.packages("BurStMisc")
install.packages("dplR")
BiocManager::install("grid", force = TRUE)
BiocManager::install("ComplexHeatmap", force = TRUE)
require(corrplot)
require(SimilarityMeasures)
require(TSdist)

#################################################################
#################################################################
#Follow me on twitter @gabycaptur
#################################################################
#################################################################


